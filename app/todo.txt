
只能用最少的时间脱贫，才能用最多的时间致富
每花一分钟时间在营生，就少花一分钟经营事业
财务自由是当下社会做你人生意愿的必备条件

3-17
---------------
1.完成了更新事件状态的操作 √

    问题①：
        通过在ViewHolder bind()中去设置点击事件 回传position会出现数据错乱,响应有问题
        分析:
            拿新增一个Event来说，因为内部类的问题，position在创建点击事件的时候可能就一直都固定了
        解决:
            DataBinding中绑定了Event,将eventId回传到ViewModel,再通过id去修改，id唯一所以一定不回出错

2.使用BindingAdapter完成根据状态显示相符合的图片 √

    好处: 减少了Adapter中大量的判断，xml化

3.一些新奇的发现

    使用Room插入数据后发现没有往ViewModel中的List去添加数据，数据依旧会更新，并且更新Item的字段也会达到这个效果
具体的原因没有去查，但是相对还是非常有意思的。
3-18 计划
-------------
1.完成Section可能因为排序而导致有多条相同Section
    这个问题主要原因可能是数据源获取时OrderBy 和 GroupBy的数据库语句造成的
    尝试:
        完成一个Event确实完成了刷新，但是当前List中的排序还是原来的规则，所以会导致出现多个重复的Section，submitList
    的List考虑重新去执行一次查询的话，效率上肯定大打折扣，去写一个自己的排序规则的话，感觉也有问题。
2.时间选择器 重要事件切换 (软键盘中的那些操作)
3-18
------------
1.完成重要事件的创建
    1.1 send按钮的图片状态取决于输入内容的为空与否 √
    1.2 send发送，添加成功后布局状态结束，否则点击添加后保存上一次的输入内容 √
    1.3 重要事件与否的状态记录和直接通过dataBinding自己关注，不再需要通过代码去完成订阅 √

        dataBinding 思考：
        Demo中对同一个属性，对viewModel自己而言通过MutableLiveData来做封装，对暴露给给外部使用的通过LiveData来封装
        达到一种效果：对内可变，对外不可变，外部拿到的始终是一个对它而言很安全的数据，而且似乎dataBinding做了对LiveData
        的适配，我没有传入LiveData，它自行进行了取值value的操作

    想要用ViewModel来存储这些状态，发现键盘布局是通过include进来的，会出现aDataBinding.bDataBinding的恶心代码。如果
    不使用include界面又会显得太复杂，切复用性会收到限制(最后思考，不同风格的键盘布局是不一样的，所以规避复用性问题)
2.完成重要事件的时间选择问题
    2.1 上来materialDatePicker就出现了问题
        反而找到了一些关于搭建一个material风格App的指引(ps:周末可以好好看看，构建一个好看的OneDay)
        https://codelabs.developers.google.com/codelabs/mdc-android/index.html?index=..%2F..index#0
    2.2 找到了一篇指引文章
        https://ahsensaeed.com/android-material-design-library-date-picker-dialog/
    2.3 关于MD(这块要下点儿功夫 感觉问题挺多的 特别是颜色这块)
        https://material.io
3-19 计划 研究好MD 开发出MD友好的界面交互来
----------
    1.研究好Theme
    2.可以把图标切换为Google官方的图标 在Material.io中
    3.完成时间的选择
    MD风格配色预览：　ColorTool
        https://material.io/resources/color
3-19
----------
    1.找到了新大陆 animated vector drawable 让图标动画起来 ★★★★★
    https://sourcediving.com/android-recipes-the-easy-path-to-animated-icons-878bffcb0920
    AnimatedVectorDrawableCompat
    要有一个好的体验：AnimatedVectorDrawableCompat 能够支持我们从一个svg友好的过渡到另一个svg，但是要逆向的话，需要
    编写代码，可以通过自定义View来完善这一件事情,但是最大的问题在于AnimatedVectorDrawableCompat需要两个兼容的SVG
        (仅当两个SVG图像的路径具有相同的命令，相同的顺序并且每个命令具有相同数量的参数时，它们才适用于变形变换。)
        这就是最大的问题所在，因为设计师不会考虑将两个不同的图标关联出相同的Path来，这对设计师来讲没有意义，如果让我们自己
    手动去修改Path直到它们兼容，这样是很难的，很费时间
    step1: 两张相同大小的svg
    step2: https://shapeshifter.design/
           对两张SVG做过渡动画
    step3: 做出反向动画
    step4: 自定义View来切换两种状态
    制作教程视频:https://www.youtube.com/watch?v=v7I6eo4Fo6U

    晚上回去做图标和体验，白天来完善代码逻辑比较合适

    md 好文章 ★★★★★ (对MD有了全新更深的理解和运用)
    https://medium.com/over-engineering/setting-up-a-material-components-theme-for-android-fbf7774da739
    多模式切换
    https://segmentfault.com/a/1190000021907887
    github 指引
    material-components-android-examples

    问题：colorSurface 始终会变亮一点 有点搞不懂 (是自己理解没到位 已纠正)~

3-20
-----------
今天做好黑暗模式和模式的切换吧

    step1 : 2套color
    step2 : 2套style
material-components-android-examples
    根据 https://github.com/odaridavid/NightKing
        https://github.com/fenglj01/material-components-android-examples themes中有详尽得color作用
        这两个项目 周末一定要搭建好两种模式 并支持切换
可能考虑放弃MaterialCalendarView 1是因为没有时间选择 2是因为真的不太好用得感觉

3-21
-----------

出现了Android 10 一下会出现主题选择得bug 而Demo没有出现这样得bug
效果出现得十分诡异

最后并且了两套color得做法 采用一套color使用两套style得方式达到了正确效果 ，不过会出现textColor得适配问题(之前直接放在
color中配置即可)

★★★★★
NightKing作为入门Demo 能够很快得看到效果，https://github.com/fenglj01/material-components-android-examples
这个项目里面有相关MD得官方配置和 一套colors 两套themes得实现方案

通过Reply这个demo来重新输送一下整个项目

使用代理给git加速 https://juejin.im/post/5cfe66406fb9a07edb393c56

笔记本接电视 搞起来

选择了一些图片 制作Icon drawable

3-24
-----------
查看官方关于主题的理解后得到启发：
https://www.youtube.com/watch?v=Owkf8DhAOSo

1.style 作用于 View Theme 作用于整个应用
2.?attr 访问的是 Theme中定义的属性 比如?attr/colorPrimary
3.selector 中 defaultColor最好放置在最下面
4.一些技巧
    tips1- : color命名 red_500 purple_200 等 直接语义化的命名 不要使用colorPrimary这样的命名方案
    tips2- : style Theme的定义上 使用.来表示继承关系 更加语义化
            Theme.AppName.Blue
            Widget.AppName.Toolbar.Blue
    tips3- : 文件的分割
            themes.xml Themes And ThemeOverlays
            types.xml TextAppear  textSize
            shape.xml
5.MD 的主要构成成份
    shape color typography

构建方案可以使用 MaterialThemeBuilder 调整好颜色、形状和字体后 再把代码copy过去进行使用

代码实现思路:
    难点分析
        1.BottomAppBar的显示样式 显示规则是动态的
        2.BottomAppBar上的menu也是动态的
    重要解决点:
        对目的地切换进行监听
        对BottomNavFrag的滑动实现监听 来达到这样的效果

    实现步骤考虑
        1.实现跳转到添加界面 (监听目的地的切换 显示和隐藏bottomAppBar) √ 3-25
        2.实现跳转到编辑界面 (监听目的地的切换 改变bottomAppBar上的按钮和功能 fab的功能也要切换) 延后
        3.实现底部操作栏的弹出 (监听滑动 监听弹出状态 从而改变bottomAppBar的显示和隐藏)
            3.1 实现弹出框
            3.2 实现sandwich跟随动画
            3.3 监听相关
            3.4 底部弹窗相关
                3.4.1 NavigationModelItem 一个密封类来确认整个底部弹出框当中可能会出现的类型 确保后期扩展
                      当中还封装了一个DiffUtils 来做唯一性的判断
                3.4.2 NavigationModel 来封装一个提供按钮的模型 以及提供可观察对象 以及监听外置
                还是一步一步来实现吧 不然更改起来会很麻烦 而且没有学习到精髓
            3.5 考虑一致大部分内容 除了账户切换recyclerView



        底部弹窗输出
            1.基本设置menu
            2.分割线
            3.用户定义的分类


        Tips 1-3-5 和Mini 应该只是 RecyclerView的Adapter不一样 Custom 可以后期版本植入
        按钮的第一次点击 可以友好提示功能 在多次使用以后 或者长时间未使用的情况下可以提示一下 让用户尽快找到操作的方式
3-25
------------
    实现首页BottomAppBar 到添加界面的 切换 √
    实现底部弹出 √
    在实现有一些问题 1.颜色 2.形状

3-26
------------
    实现
        1. 颜色样式的调整
        2. 状态的监听 同步到appBar相应相关效果

            2.1fab的显示与否 √
                BottomSheetBehavior.BottomSheetCallback() 来监听当中的变化
                通过list来添加多个
                fab隶属于act,所以fragment向外提供了addStateChangeAction方法 实际上是通过callback统一回执的
            2.2返回键控制navDrawer的显示
                 requireActivity().onBackPressedDispatcher.addCallback(this, closeDrawerOnBackPressed)
                 通过以上方法来监听返回键的实现 这个是直接在drawerFragment中实现，为的是更好的控制
            2.3scrimView的显示 透明度
                1.需要监听slide
                2.需要监听state state控制的是可见度 slide控制透明程度来达到一个友好的体验效果
            2.4实现sandwich旋转效果
                fab的显示与否 通过stateAction来判断
                sandwich的动画 通过slideAction来完成
                相对来说是比较复杂的 因为我这里不需要进行嵌套 所以相对还要简单一些
            2.5控制底部menu的显示(不同fragment 不同的底部bottom)


    Tips 右滑完成事件
    Tips colorPrimarySurface 在light中指向colorPrimary 在dark中执行colorSurface
         on
3-27
-----------
    主要实现底部menu的显示

    tips bottom menu　icon tint 是没有属性来做区分得 所以黑/白两个主题 应该准备两套颜色得icon

3-30
-----------
    实现了Item得基本样式
    基于想要做一个带有清单或者步骤 插入图片 或者插入视频 插入音频得操作 在考虑富文本编辑器 功能不用太复杂
    一个合适得Demo https://github.com/wasabeef/richeditor-android
                 https://github.com/mthli/Knife
3-31
----------
    创建界面以及创建的功能 (今天需要完善好)
        review : 光标和选中状态的颜色 TextInputLayout中直接用的ColorPrimary 目前没有找到更改的方法

    再考虑弄一下配色 现在黑白的配色方案 会带来不少的问题

4-2
----------
    前面几天有点懈怠了，主要因为和小董吵架感到莫名得失落，鲁吉成那儿也是老油条了。道理都想得很明白了，万事只有靠自己不断悟道
只是有一点阶段性得沉寂。接下来继续好好完善OneDay，做一个有产品理念的程序员。

    修改了TextInputLayout 会选取colorPrimary 做为光标和下划线得颜色。
    tips:
        1. TextInputLayout 和 TextInputEditText 得属性需要分开去编写 各管各的
        2. 对光标 textCursorDrawable可以对其进行控制
        3. colorControlActivated 对光标得工资没有生效
    To-Do:
        1. 长按后弹出的选择颜色为colorPrimary []
        2. 下拉输入框 末尾的按钮 颜色在点击后会变为colorPrimary []

    color上 可以通过color selector来完成很多操作
4-3
----------
    1.完成UI上的基本功能
    2.实现转场动画
    3.实现创建功能
    4.编辑到发送按钮的动画
4-8
----------
    1.Dribbble 上居然有好的动画开源酷
    2.Ramotion github上发布了很多不错的动效 准备引入到我的项目中来
    3.考虑把OneDay cut 化
4-9
----------
    1. 创建界面tag选择体验优化
    2. 从首页到创建界面的过渡动画 1
    3. 备注更换为步骤 考虑一下如何来弄

使用了一下 Transitions 照搬了一下代码 感觉还是不错的 但是原理还没有抽空去了解 现在的首要目标是把功能和效果实现 所以速度
是第一位。

在选择器上开始置入更好的UI体验 图标上思考是单一的MD风格还是可以考虑加入一些github风格的点缀图标

完成了基本功能以后 出现bug
1. 首次进入选择tag 如果不点击日期选择 或者触发一下其它情况的话 没有办法正常显示
    一开始以为是焦掉的问题 后面发现不是
2. 发现弹出picker后 输入框 还能获取到焦掉 是真的扯蛋

4-10
----------
    1.解决创建选择bug
    2.优化选择器的配色
    3.考虑弄一下多颜色的分类icon
在选择器更换为Java代码后还是不能达到效果。代码上与Kotlin和Java无关
之后在新起的一个Fragment中 也不能正常的展示 还是得触发了Dialog后才能触发
排除
    1. Kotlin 和 Java代码的不一样
    2. Fragment 中 触发相关
大概找到问题所在了
    当使用了事务进行Fragment的跳转后 就出现这个问题 也就是直接在Fragment中使用没问题 replace就会出现问题
    最终找到了问题所在
    在初始化的时候 需要触发 onWindowFocusChange 的方法 在其中作相关处理操作 比如默认选中项这些
    如果是直接在第一个Fragment中直接引用DSListView 那么因为焦点从系统切换到APP中来 那么会达到效果，但是如果从第一个Fragment
    跳转到第二个Fragment中 onWindowFocusChange 并未触发

    因为是单Activity应用 所以 onWindowFocusChange 只会在应用进入时呗触发一次 之后就不会再触发了 而DSListView 主要
    问题就是在 onWindowFocusChange 进行相关的初始化 其它地方呢我又不能很好的获取到PickerBox的高度位置大小


大致的解决方案
    1. 在init手动重置一下 onWindowFocusChange 但是会出现计算高度有误的情况 不能正确显示 和滑动 (方案不可行)

    这个控件可能只是一个Demo控件 没有考虑的十分周全 里面相关的计算都已经做好了 可能需要自己再扩展添加一下

最终的解决方案
    考虑重写

    最快速的见效方案 再OnDraw中进行一下初始化 (但是默认选择项没有显示出来其它都是正常的)
    这里最直接的原因是因为 Activity 的生命周期问题  onWindowFocusChange 甚至是在onDraw以后才触发 但是它的触发规律
    在Fragment 或者说单Activity中是不能起到很好的作用的。

4-11 12
----------
    1. 解决了DSListView的初始化问题 但是在pickerBox的初始化联动上面并没有做到 这可能会影响我后期 想对默认tag选择项的
实现上带来一些问题 不过现在默认让它选择的是第一个吧
    2. 修改其配色方案问题
        2.1 修改空间颜色时 因为加了透明度的原因 会导致layer-list的显示出现穿透
4-13
----------
    1. 创建界面优化
        1.1 edtTextView 优化 √
        1.2 选择tag icon 优化 √ 比较满意
        1.3 选择tag 背景 优化 √
        1.4 编辑的动态按钮制作 √
            在实现上面 参看了之前的动画icon的制作 使用了imageState 制作了animate-selector 来完成这个样的效果,比自
            定义View更加高级和有效,考虑还是做一下封装把点击事件和editText的文字监听做到里面去
        1.5 保证Tag 选择时 键盘不回触发弹出 也就是EditText 不回获取到焦点 √
            增加了onShow Hide 的回调
            ★★★
            一开始考虑使用遍历子控件的设置focusAble 和 clickAble来做 能达到目的 但是对DSListView 依然有多点触控带来
            的麻烦
            最后灵活的控制了 splitMotionEventEnable 来达到最佳的效果
        1.8 close 按钮 触发隐藏软键盘 √
    2. 步骤的添加方案
    3. 考虑富文本方案 问题

    自由派这个网站做得感觉比较不错
4-14
-----------
    1. 封装AvdDrawableImageButton √
        1.  forwardAvd （统筹到了asl中）
        2.  reverseAvd （统筹到了asl中）
        3.  aslDrawable 动画icon drawable
        4.  OnStateChangeListener 状态切换监听
                onStateOnTrue
                onStateOnFalse
        5.  OnClickListener 点击监听
                onClick(state:Boolean)
        6.  triggerCondition 触发条件

    2. 封装内容编辑器
        查看了网上一些富文本编辑器的做法，js居多，但是带来的问题也很多，而且自己目前对js掌握并不够好，所以pass掉了这个
        做法，准备自己来封装一个极为简单的步骤、清单、编辑器 使用原生的控件来做 暂时不涉及图片登富文本的功能 后期慢慢加入
        可以参看knife的做法 原理上edit + span
        如果协程一个编辑器 开发成本可能会提高很多
        考虑做成RecyclerView 一个一个的添加的做法(就按照这么做)
            需要注意一个问题 如果使用RecyclerView + EditText来做 那么可能会出现焦点混乱带来得问题
        今晚实现：
            1. 创建步骤RecyclerView 全部内容
    3. 封装重要程度选择器
    4. codeReview 一下 √
    5. 重新优化一下tagIcon √
    6. 考虑优化一下ImageState的判断条件

    状态还是越来越好了,刷一下commit

4-15
------------
    1. StepNumberView 的构建
4-16
------------
    1. StepNumberView 优化 和 状态改变回调得实现
    2. StepCreateView 的基本实现
        2.1 步骤的内容输入限制与否 步骤的个数是否要做限制
        2.2 分割线
        2.3 删除事件
        2.4 滑动问题
            因为内容的不做限制 导致键盘可能会遮挡当前的输入内容
            考虑到PickerBox 中存在ListView 就不打算在外部使用嵌套ScrollView来完成这件事情了

            考虑
                在键盘弹出的地方把输入框也弹出 输入步骤的内容在输入框中完成 之后发送后再添加到列表中去 并且滚动到该项
                去 RecyclerView 也就可以滑动
            问题
                RecyclerView的滑动会导致底部的bar 弹出.... (通过监听页面目的地的切换 控制bottomAppBar的hideOnScroll来得到解决)
            加入限制后会导致比较多的问题

4-17
------------
    考虑解决删除的问题

        首先在ViewHolder中bind中定义position 是局部成成员变量 是不会随着notify而有所改变的 所以会导致删除乱项
        其次在ViewHolder中对EditText设置tag 并且合适的地方刷新 和重置一下 达到避免删除 和刷新后数据的错乱效果
        同步完成状态
    完成创建事件
        完成基本功能

4-18
------------
    完成创建事件
        数据的接口还需要优化
4-20
------------
    展示步骤
        1. 将LiveData<Event> 更换为LiveData<EventWithSteps> 查出步骤的同时也查出响应的步骤来
    考虑把首页列表item做成展开项
        收起时: 多少步 当前在哪步
        展开时: 具体的步骤
        2. 为了更高的UI效果 在cell_content中只显示固定条目 点击编辑按钮后 跳转到编辑界面去 (后期再具体确定下来)
            固定高度是不可能的 因为步骤个数本就不是固定的
    问题：
        折叠展开 再收起后 有一些压缩内容
4-21
------------
    完成折叠内容的显示
    优化代码
    考虑步骤rv带来的一些问题 以及 必须是两倍 以及布局摆放的合理性

    还需要考虑一个问题 当Step recyclerView为动态的以后 折叠的效果

    1. 折叠崩溃Bug
        没有找到原因 似乎是Fragment生命周期的问题
        直接取消了展开状态的记录 莫名的问题
        找到原因 在每次回来以后都会去刷新list 默认情况下是折叠状态 所以想要直接展开折叠状态 就会出现问题 因为展开折叠状态
        的View 并没有展示出来
    2. 再弄一个步骤View 带有动画效果 这样体验会更好一点

    专注度也太低了！！！！！！！！！！！！！！！！！！！ 草泥马的

    ListAdapter DiffUtils 理解不透彻 带来了许多问题

    关于列表要做的东西还是很多的
        PageListAdapter
    关于这个记录问题展开状态的问题 以及添加一个条目后 刷新到相关地方去 也要想办法解决一下了

    折叠View 也有bug 还是得自己来调 有点操蛋啊
4-22
--------------
    1. 要专注起来
    2. 先做了步骤的展示
        2.1 步骤View 带有动画
        2.2 步骤点击事件和预览的回馈
        2.3 封装一个RecyclerView 来做为整个预览View
        2.4 在包装一个RecyclerView和TextView 作为预览

        StepView

            圆形+Line 如果为第一个步骤 那么不需要绘制后面的线

            当点击完成一个后 要通知下一个 而下一个根据自己的状态会有所改变

            StepView 只用负责绘制步骤这个View 其它什么也不用做

            在RecyclerView中再进行更为复杂的操作 控制下一步 控制显示状态等

            1. 先让整个View能画出来 √
                stepNumber 居中上有问题 √
                对其上使用bounds 获取的宽度 会导致不一样 所以最后采用了paint.measureText 来搞定宽度
            2. 让ViewSelected的时候 有动画 √
                类似radioButton 的动画 √
                动画: 背景先扩大到selectedRadius 然后回到circleRadius √
            3. 让切换状态的时候 有动画 √
                分析过后 也就是 finished unfinished executing 三种动画

                状态切换都是 先放大 后缩小 然后出现对应的内容

                大概思路就是在更改半径的同时 更改line的长度 并且绘制
                绘制的时候只需要判断 是否是完成 对Line而言 只有完成与否两个状态
                drawLine时 要绘制backLine 还是绘制currentLine 并且控制方向
            4. 增加一些监听回调
                1. 选择状态切换
                2. 自身状态切换
4-26
--------------
    完成步骤预览View
        1. 正常的显示步骤
        2. 选择切换后可以回调 通知外部修改内容
        3. 上下步骤的联动效果
        4. 自动移动功能

    问题陷入回调地狱
        stepView -> stepListView -> stepAdapter -> miniFragment -> viewModel

        viewModel　一层一层的传递　

        怎样达到一个输入的目的呢

            1. 在列表里面就不要设计修改了 只展示 去到详情页再做修改 (其实还是可以考虑在StepListView中来完善)

            2. 设计上出了大问题 (暂时不能避免这种情况) √

            3. 点击位置需要处理一下 √

            今天又没有什么努力劲儿啊

4-28
---------
    1. StepListControlView 预览和操作 整合起来 √
    2. Ui 效果调整
        视图配色的调整
    3. 因为Step在数据库中并没有设计正在执行机制 现在这个预览里面会存在 但是会相对显得不知道怎么完善的好
    4. 折叠View的Bug 有点大
        准备修改动一下FoldingCell控件

Need Better

    1. 提醒时间可以加入小时
    2. 数据库分页
    3. 时间比对问题
    4. Event 和 Step 的设计优化

可以写的文章
    1. 动态按钮
    2. MD
    3. JetPack
写完OneDay之后的打算
    1. 完成Android基本知识的巩固
    2. 完成Java Kotlin 基本知识的巩固
    3. 完成Flutter的学习
    4. 开始找新的工作
