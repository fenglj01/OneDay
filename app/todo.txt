
只能用最少的时间脱贫，才能用最多的时间致富
每花一分钟时间在营生，就少花一分钟经营事业
财务自由是当下社会做你人生意愿的必备条件

3-17
---------------
1.完成了更新事件状态的操作 √

    问题①：
        通过在ViewHolder bind()中去设置点击事件 回传position会出现数据错乱,响应有问题
        分析:
            拿新增一个Event来说，因为内部类的问题，position在创建点击事件的时候可能就一直都固定了
        解决:
            DataBinding中绑定了Event,将eventId回传到ViewModel,再通过id去修改，id唯一所以一定不回出错

2.使用BindingAdapter完成根据状态显示相符合的图片 √

    好处: 减少了Adapter中大量的判断，xml化

3.一些新奇的发现

    使用Room插入数据后发现没有往ViewModel中的List去添加数据，数据依旧会更新，并且更新Item的字段也会达到这个效果
具体的原因没有去查，但是相对还是非常有意思的。
3-18 计划
-------------
1.完成Section可能因为排序而导致有多条相同Section
    这个问题主要原因可能是数据源获取时OrderBy 和 GroupBy的数据库语句造成的
    尝试:
        完成一个Event确实完成了刷新，但是当前List中的排序还是原来的规则，所以会导致出现多个重复的Section，submitList
    的List考虑重新去执行一次查询的话，效率上肯定大打折扣，去写一个自己的排序规则的话，感觉也有问题。
2.时间选择器 重要事件切换 (软键盘中的那些操作)
3-18
------------
1.完成重要事件的创建
    1.1 send按钮的图片状态取决于输入内容的为空与否 √
    1.2 send发送，添加成功后布局状态结束，否则点击添加后保存上一次的输入内容 √
    1.3 重要事件与否的状态记录和直接通过dataBinding自己关注，不再需要通过代码去完成订阅 √

        dataBinding 思考：
        Demo中对同一个属性，对viewModel自己而言通过MutableLiveData来做封装，对暴露给给外部使用的通过LiveData来封装
        达到一种效果：对内可变，对外不可变，外部拿到的始终是一个对它而言很安全的数据，而且似乎dataBinding做了对LiveData
        的适配，我没有传入LiveData，它自行进行了取值value的操作

    想要用ViewModel来存储这些状态，发现键盘布局是通过include进来的，会出现aDataBinding.bDataBinding的恶心代码。如果
    不使用include界面又会显得太复杂，切复用性会收到限制(最后思考，不同风格的键盘布局是不一样的，所以规避复用性问题)
2.完成重要事件的时间选择问题
    2.1 上来materialDatePicker就出现了问题
        反而找到了一些关于搭建一个material风格App的指引(ps:周末可以好好看看，构建一个好看的OneDay)
        https://codelabs.developers.google.com/codelabs/mdc-android/index.html?index=..%2F..index#0
    2.2 找到了一篇指引文章
        https://ahsensaeed.com/android-material-design-library-date-picker-dialog/
    2.3 关于MD(这块要下点儿功夫 感觉问题挺多的 特别是颜色这块)
        https://material.io
3-19 计划 研究好MD 开发出MD友好的界面交互来
----------
    1.研究好Theme
    2.可以把图标切换为Google官方的图标 在Material.io中
    3.完成时间的选择
    MD风格配色预览：　ColorTool
        https://material.io/resources/color
3-19
----------
    1.找到了新大陆 animated vector drawable 让图标动画起来 ★★★★★
    https://sourcediving.com/android-recipes-the-easy-path-to-animated-icons-878bffcb0920
    AnimatedVectorDrawableCompat
    要有一个好的体验：AnimatedVectorDrawableCompat 能够支持我们从一个svg友好的过渡到另一个svg，但是要逆向的话，需要
    编写代码，可以通过自定义View来完善这一件事情,但是最大的问题在于AnimatedVectorDrawableCompat需要两个兼容的SVG
        (仅当两个SVG图像的路径具有相同的命令，相同的顺序并且每个命令具有相同数量的参数时，它们才适用于变形变换。)
        这就是最大的问题所在，因为设计师不会考虑将两个不同的图标关联出相同的Path来，这对设计师来讲没有意义，如果让我们自己
    手动去修改Path直到它们兼容，这样是很难的，很费时间
    step1: 两张相同大小的svg
    step2: https://shapeshifter.design/
           对两张SVG做过渡动画
    step3: 做出反向动画
    step4: 自定义View来切换两种状态
    制作教程视频:https://www.youtube.com/watch?v=v7I6eo4Fo6U

    晚上回去做图标和体验，白天来完善代码逻辑比较合适

    md 好文章 ★★★★★ (对MD有了全新更深的理解和运用)
    https://medium.com/over-engineering/setting-up-a-material-components-theme-for-android-fbf7774da739
    多模式切换
    https://segmentfault.com/a/1190000021907887
    github 指引
    material-components-android-examples

    问题：colorSurface 始终会变亮一点 有点搞不懂 (是自己理解没到位 已纠正)~

3-20
-----------
今天做好黑暗模式和模式的切换吧

    step1 : 2套color
    step2 : 2套style
material-components-android-examples
    根据 https://github.com/odaridavid/NightKing
        https://github.com/fenglj01/material-components-android-examples themes中有详尽得color作用
        这两个项目 周末一定要搭建好两种模式 并支持切换
可能考虑放弃MaterialCalendarView 1是因为没有时间选择 2是因为真的不太好用得感觉

3-21
-----------

出现了Android 10 一下会出现主题选择得bug 而Demo没有出现这样得bug
效果出现得十分诡异

最后并且了两套color得做法 采用一套color使用两套style得方式达到了正确效果 ，不过会出现textColor得适配问题(之前直接放在
color中配置即可)

★★★★★
NightKing作为入门Demo 能够很快得看到效果，https://github.com/fenglj01/material-components-android-examples
这个项目里面有相关MD得官方配置和 一套colors 两套themes得实现方案

通过Reply这个demo来重新输送一下整个项目

使用代理给git加速 https://juejin.im/post/5cfe66406fb9a07edb393c56

笔记本接电视 搞起来

选择了一些图片 制作Icon drawable

3-24
-----------
查看官方关于主题的理解后得到启发：
https://www.youtube.com/watch?v=Owkf8DhAOSo

1.style 作用于 View Theme 作用于整个应用
2.?attr 访问的是 Theme中定义的属性 比如?attr/colorPrimary
3.selector 中 defaultColor最好放置在最下面
4.一些技巧
    tips1- : color命名 red_500 purple_200 等 直接语义化的命名 不要使用colorPrimary这样的命名方案
    tips2- : style Theme的定义上 使用.来表示继承关系 更加语义化
            Theme.AppName.Blue
            Widget.AppName.Toolbar.Blue
    tips3- : 文件的分割
            themes.xml Themes And ThemeOverlays
            types.xml TextAppear  textSize
            shape.xml
5.MD 的主要构成成份
    shape color typography

构建方案可以使用 MaterialThemeBuilder 调整好颜色、形状和字体后 再把代码copy过去进行使用

代码实现思路:
    难点分析
        1.BottomAppBar的显示样式 显示规则是动态的
        2.BottomAppBar上的menu也是动态的
    重要解决点:
        对目的地切换进行监听
        对BottomNavFrag的滑动实现监听 来达到这样的效果

    实现步骤考虑
        1.实现跳转到添加界面 (监听目的地的切换 显示和隐藏bottomAppBar) √ 3-25
        2.实现跳转到编辑界面 (监听目的地的切换 改变bottomAppBar上的按钮和功能 fab的功能也要切换) 延后
        3.实现底部操作栏的弹出 (监听滑动 监听弹出状态 从而改变bottomAppBar的显示和隐藏)
            3.1 实现弹出框
            3.2 实现sandwich跟随动画
            3.3 监听相关
            3.4 底部弹窗相关
                3.4.1 NavigationModelItem 一个密封类来确认整个底部弹出框当中可能会出现的类型 确保后期扩展
                      当中还封装了一个DiffUtils 来做唯一性的判断
                3.4.2 NavigationModel 来封装一个提供按钮的模型 以及提供可观察对象 以及监听外置
                还是一步一步来实现吧 不然更改起来会很麻烦 而且没有学习到精髓
            3.5 考虑一致大部分内容 除了账户切换recyclerView



        底部弹窗输出
            1.基本设置menu
            2.分割线
            3.用户定义的分类


        Tips 1-3-5 和Mini 应该只是 RecyclerView的Adapter不一样 Custom 可以后期版本植入
        按钮的第一次点击 可以友好提示功能 在多次使用以后 或者长时间未使用的情况下可以提示一下 让用户尽快找到操作的方式
3-25
------------
    实现首页BottomAppBar 到添加界面的 切换 √
    实现底部弹出 √
    在实现有一些问题 1.颜色 2.形状

3-26
------------
    实现
        1. 颜色样式的调整
        2. 状态的监听 同步到appBar相应相关效果

            2.1fab的显示与否 √
                BottomSheetBehavior.BottomSheetCallback() 来监听当中的变化
                通过list来添加多个
                fab隶属于act,所以fragment向外提供了addStateChangeAction方法 实际上是通过callback统一回执的
            2.2返回键控制navDrawer的显示
                 requireActivity().onBackPressedDispatcher.addCallback(this, closeDrawerOnBackPressed)
                 通过以上方法来监听返回键的实现 这个是直接在drawerFragment中实现，为的是更好的控制
            2.3scrimView的显示 透明度
                1.需要监听slide
                2.需要监听state state控制的是可见度 slide控制透明程度来达到一个友好的体验效果
            2.4实现sandwich旋转效果
                fab的显示与否 通过stateAction来判断
                sandwich的动画 通过slideAction来完成
                相对来说是比较复杂的 因为我这里不需要进行嵌套 所以相对还要简单一些
            2.5控制底部menu的显示(不同fragment 不同的底部bottom)


    Tips 右滑完成事件
    Tips colorPrimarySurface 在light中指向colorPrimary 在dark中执行colorSurface
         on
3-27
-----------
    主要实现底部menu的显示
